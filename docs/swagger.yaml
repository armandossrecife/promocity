swagger: "2.0"
info:
  description: "Web Server Promocity.https://github.com/armandossrecife/promocity"
  version: "1.0.0"
  title: "Promocity Web Server"
  termsOfService: "https://github.com/armandossrecife/promocity/terms/"
  contact:
    email: "armando@ufpi.edu.br"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "18.207.202.131:8082"
basePath: "/promocity"
tags:
- name: "promocity"
  description: "Everything about Promocity"
  externalDocs:
    description: "Find out more"
    url: "https://github.com/armandossrecife/promocity"
- name: "store"
  description: "Access to stores"
- name: "user"
  description: "Operations about user"
  externalDocs:
    description: "Find out more about our store"
    url: "https://github.com/armandossrecife/promocity"
schemes:
- "https"
- "http"
paths:
  /store/list:
    get:
      tags:
      - "store"
      summary: "Returns all stores"
      description: "Returns all stores in promocity"
      operationId: "getInventory"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            type: "object"
            additionalProperties:
              type: "integer"
              format: "int32"
      security:
      - api_key: []
  /store:
    post:
      tags:
      - "store"
      summary: "Place a new store"
      description: ""
      operationId: "placeOrder"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "New Store"
        required: true
        schema:
          $ref: "#/definitions/Store"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Store"
        400:
          description: "Invalid Order"
  /store/{storeId}:
    get:
      tags:
      - "store"
      summary: "Find store by ID"
      description: "For valid response try integer IDs with value >= 1 and <= 10.         Other values will generated exceptions"
      operationId: "getOrderById"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "storeId"
        in: "path"
        description: "ID of store needs to be fetched"
        required: true
        type: "integer"
        maximum: 10.0
        minimum: 1.0
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Store"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Order not found"
    delete:
      tags:
      - "store"
      summary: "Delete store by ID"
      description: "For valid response try integer IDs with positive integer value.         Negative or non-integer values will generate API errors"
      operationId: "deleteOrder"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "storeId"
        in: "path"
        description: "ID of store that needs to be deleted"
        required: true
        type: "integer"
        minimum: 1.0
        format: "int64"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "Order not found"
  /user:
    post:
      tags:
      - "user"
      summary: "Create user"
      description: "This can only be done by the logged in user."
      operationId: "createUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
  /user/createWithArray:
    post:
      tags:
      - "user"
      summary: "Creates list of users with given input array"
      description: ""
      operationId: "createUsersWithArrayInput"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "List of user object"
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
  /user/createWithList:
    post:
      tags:
      - "user"
      summary: "Creates list of users with given input array"
      description: ""
      operationId: "createUsersWithListInput"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "List of user object"
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
  /user/login:
    get:
      tags:
      - "user"
      summary: "Logs user into the system"
      description: ""
      operationId: "loginUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "query"
        description: "The user name for login"
        required: true
        type: "string"
      - name: "password"
        in: "query"
        description: "The password for login in clear text"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "string"
          headers:
            X-Rate-Limit:
              type: "integer"
              format: "int32"
              description: "calls per hour allowed by the user"
            X-Expires-After:
              type: "string"
              format: "date-time"
              description: "date in UTC when token expires"
        400:
          description: "Invalid username/password supplied"
  /user/logout:
    get:
      tags:
      - "user"
      summary: "Logs out current logged in user session"
      description: ""
      operationId: "logoutUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters: []
      responses:
        default:
          description: "successful operation"
  /user/{username}/coupons:
    get:
      tags:
      - "user"
      summary: "Get coupons by user name"
      description: ""
      operationId: "getUserByName"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be fetched. Use user1 for testing. "
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        400:
          description: "Invalid username supplied"
        404:
          description: "User not found"
  /user/{username}/monitoring/location/{latitude}/{longitude}:
    get:
      tags:
      - "user"
      summary: "Get monitoring location by user name"
      description: ""
      operationId: "getUserByLocation"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be fetched. Use user1 for testing. "
        required: true
        type: "string"
      - name: "latitude"
        in: "path"
        required: true
        type: "string"
      - name: "longitude"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        400:
          description: "Invalid username supplied"
        404:
          description: "User not found"
  /user/{username}:
    get:
      tags:
      - "user"
      summary: "Get user by user name"
      description: ""
      operationId: "getUserByName1"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be fetched. Use user1 for testing. "
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        400:
          description: "Invalid username supplied"
        404:
          description: "User not found"
    put:
      tags:
      - "user"
      summary: "Updated user"
      description: "This can only be done by the logged in user."
      operationId: "updateUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "name that need to be updated"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Updated user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        400:
          description: "Invalid user supplied"
        404:
          description: "User not found"
    delete:
      tags:
      - "user"
      summary: "Delete user"
      description: "This can only be done by the logged in user."
      operationId: "deleteUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be deleted"
        required: true
        type: "string"
      responses:
        400:
          description: "Invalid username supplied"
        404:
          description: "User not found"
  /promotion/list:
    get:
      tags:
      - "promotion"
      summary: "Returns all promotions"
      description: "Returns all promotions in promocity"
      operationId: "getlist"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            type: "object"
            additionalProperties:
              type: "integer"
              format: "int32"
      security:
      - api_key: []
  /promotion:
    post:
      tags:
      - "promotion"
      summary: "Place a new promotion"
      description: ""
      operationId: "placepromotion"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "New promotion"
        required: true
        schema:
          $ref: "#/definitions/Promotion"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Promotion"
        400:
          description: "Invalid promotion"
  /promotion/{promotionId}:
    get:
      tags:
      - "promotion"
      summary: "Find promotion by ID"
      description: "For valid response try integer IDs with value >= 1 and <= 10.         Other values will generated exceptions"
      operationId: "getpromotionById"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "promotionId"
        in: "path"
        description: "ID of promotion needs to be fetched"
        required: true
        type: "integer"
        maximum: 10.0
        minimum: 1.0
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Promotion"
        400:
          description: "Invalid ID supplied"
        404:
          description: "promotion not found"
    delete:
      tags:
      - "promotion"
      summary: "Delete promotion by ID"
      description: "For valid response try integer IDs with positive integer value.         Negative or non-integer values will generate API errors"
      operationId: "deletepromotion"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "promotionId"
        in: "path"
        description: "ID of promotion that needs to be deleted"
        required: true
        type: "integer"
        minimum: 1.0
        format: "int64"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "promotion not found"
  /coupon/list:
    get:
      tags:
      - "coupon"
      summary: "Returns all coupons"
      description: "Returns all coupons in promocity"
      operationId: "getlistCoupon"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            type: "object"
            additionalProperties:
              type: "integer"
              format: "int32"
      security:
      - api_key: []
  /coupon:
    post:
      tags:
      - "coupon"
      summary: "Place a new coupon"
      description: ""
      operationId: "placecoupon"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "New coupon"
        required: true
        schema:
          $ref: "#/definitions/Coupon"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Coupon"
        400:
          description: "Invalid coupon"
  /coupon/{couponId}:
    get:
      tags:
      - "coupon"
      summary: "Find coupon by ID"
      description: "For valid response try integer IDs with value >= 1 and <= 10.         Other values will generated exceptions"
      operationId: "getcouponById"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "couponId"
        in: "path"
        description: "ID of coupon needs to be fetched"
        required: true
        type: "integer"
        maximum: 10.0
        minimum: 1.0
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Coupon"
        400:
          description: "Invalid ID supplied"
        404:
          description: "coupon not found"
    delete:
      tags:
      - "coupon"
      summary: "Delete coupon by ID"
      description: "For valid response try integer IDs with positive integer value.         Negative or non-integer values will generate API errors"
      operationId: "deletecoupon"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "couponId"
        in: "path"
        description: "ID of coupon that needs to be deleted"
        required: true
        type: "integer"
        minimum: 1.0
        format: "int64"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "coupon not found"
securityDefinitions:
  store_auth:
    type: "oauth2"
    authorizationUrl: "http://store.swagger.io/oauth/dialog"
    flow: "implicit"
    scopes:
      write:store: "modify store in your account"
      read:store: "read your store"
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"
definitions:
  Store:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      storeId:
        type: "integer"
        format: "int64"
      quantity:
        type: "integer"
        format: "int32"
      shipDate:
        type: "string"
        format: "date-time"
      status:
        type: "string"
        description: "Order Status"
        enum:
        - "placed"
        - "approved"
        - "delivered"
      complete:
        type: "boolean"
        default: false
    xml:
      name: "Order"
  Promotion:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
    xml:
      name: "Promotion"
  Coupon:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
    xml:
      name: "Coupon"
  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      username:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      phone:
        type: "string"
      userStatus:
        type: "integer"
        format: "int32"
        description: "User Status"
    xml:
      name: "User"
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"